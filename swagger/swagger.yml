swagger: "2.0"
info:
  title: Friend Management API
  description: beego has a very cool tools to autogenerate documents for your API
  version: 1.0.0
  termsOfService: http://beego.me/
  contact:
    email: astaxie@gmail.com
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
basePath: /v1
paths:
  /Friend/:
    get:
      tags:
      - Friend
      description: get Friend
      operationId: FriendController.Get All
      parameters:
      - in: query
        name: query
        description: Filter. e.g. col1:v1,col2:v2 ...
        type: string
      - in: query
        name: fields
        description: Fields returned. e.g. col1,col2 ...
        type: string
      - in: query
        name: sortby
        description: Sorted-by fields. e.g. col1,col2 ...
        type: string
      - in: query
        name: order
        description: Order corresponding to each sortby field, if single value, apply
          to all sortby fields. e.g. desc,asc ...
        type: string
      - in: query
        name: limit
        description: Limit the size of result set. Must be an integer
        type: string
      - in: query
        name: offset
        description: Start position of result set. Must be an integer
        type: string
      responses:
        "200":
          schema:
            $ref: '#/definitions/models.Friend'
        "403": {}
    post:
      tags:
      - Friend
      description: create Friend
      operationId: FriendController.Post
      parameters:
      - in: body
        name: body
        description: body for Friend content
        required: true
        schema:
          $ref: '#/definitions/models.Friend'
      responses:
        "201":
          description: '{int} models.Friend'
        "403":
          description: body is empty
  /Friend/{id}:
    get:
      tags:
      - Friend
      description: get Friend by id
      operationId: FriendController.Get One
      parameters:
      - in: path
        name: id
        description: The key for staticblock
        required: true
        type: string
      responses:
        "200":
          schema:
            $ref: '#/definitions/models.Friend'
        "403":
          description: :id is empty
    put:
      tags:
      - Friend
      description: update the Friend
      operationId: FriendController.Put
      parameters:
      - in: path
        name: id
        description: The id you want to update
        required: true
        type: string
      - in: body
        name: body
        description: body for Friend content
        required: true
        schema:
          $ref: '#/definitions/models.Friend'
      responses:
        "200":
          schema:
            $ref: '#/definitions/models.Friend'
        "403":
          description: :id is not int
    delete:
      tags:
      - Friend
      description: delete the Friend
      operationId: FriendController.Delete
      parameters:
      - in: path
        name: id
        description: The id you want to delete
        required: true
        type: string
      responses:
        "200":
          description: '{string} delete success!'
        "403":
          description: id is empty
  /Friend/Connect:
    post:
      tags:
      - Friend
      description: create Friend Connection
      operationId: FriendController.Connect
      parameters:
      - in: body
        name: body
        description: body for Friends content
        required: true
        schema:
          $ref: '#/definitions/dtos.FriendsInput'
      responses:
        "201":
          description: '{"success": true}'
        "403":
          description: body is empty
  /Subscription/:
    get:
      tags:
      - Subscription
      description: get Subscription
      operationId: SubscriptionController.Get All
      parameters:
      - in: query
        name: query
        description: Filter. e.g. col1:v1,col2:v2 ...
        type: string
      - in: query
        name: fields
        description: Fields returned. e.g. col1,col2 ...
        type: string
      - in: query
        name: sortby
        description: Sorted-by fields. e.g. col1,col2 ...
        type: string
      - in: query
        name: order
        description: Order corresponding to each sortby field, if single value, apply
          to all sortby fields. e.g. desc,asc ...
        type: string
      - in: query
        name: limit
        description: Limit the size of result set. Must be an integer
        type: string
      - in: query
        name: offset
        description: Start position of result set. Must be an integer
        type: string
      responses:
        "200":
          schema:
            $ref: '#/definitions/models.Subscription'
        "403": {}
    post:
      tags:
      - Subscription
      description: create Subscription
      operationId: SubscriptionController.Post
      parameters:
      - in: body
        name: body
        description: body for Subscription content
        required: true
        schema:
          $ref: '#/definitions/models.Subscription'
      responses:
        "201":
          description: '{int} models.Subscription'
        "403":
          description: body is empty
  /Subscription/{id}:
    get:
      tags:
      - Subscription
      description: get Subscription by id
      operationId: SubscriptionController.Get One
      parameters:
      - in: path
        name: id
        description: The key for staticblock
        required: true
        type: string
      responses:
        "200":
          schema:
            $ref: '#/definitions/models.Subscription'
        "403":
          description: :id is empty
    put:
      tags:
      - Subscription
      description: update the Subscription
      operationId: SubscriptionController.Put
      parameters:
      - in: path
        name: id
        description: The id you want to update
        required: true
        type: string
      - in: body
        name: body
        description: body for Subscription content
        required: true
        schema:
          $ref: '#/definitions/models.Subscription'
      responses:
        "200":
          schema:
            $ref: '#/definitions/models.Subscription'
        "403":
          description: :id is not int
    delete:
      tags:
      - Subscription
      description: delete the Subscription
      operationId: SubscriptionController.Delete
      parameters:
      - in: path
        name: id
        description: The id you want to delete
        required: true
        type: string
      responses:
        "200":
          description: '{string} delete success!'
        "403":
          description: id is empty
  /User/:
    get:
      tags:
      - User
      description: get User
      operationId: UserController.Get All
      parameters:
      - in: query
        name: query
        description: Filter. e.g. col1:v1,col2:v2 ...
        type: string
      - in: query
        name: fields
        description: Fields returned. e.g. col1,col2 ...
        type: string
      - in: query
        name: sortby
        description: Sorted-by fields. e.g. col1,col2 ...
        type: string
      - in: query
        name: order
        description: Order corresponding to each sortby field, if single value, apply
          to all sortby fields. e.g. desc,asc ...
        type: string
      - in: query
        name: limit
        description: Limit the size of result set. Must be an integer
        type: string
      - in: query
        name: offset
        description: Start position of result set. Must be an integer
        type: string
      responses:
        "200":
          schema:
            $ref: '#/definitions/models.User'
        "403": {}
    post:
      tags:
      - User
      description: create User
      operationId: UserController.Post
      parameters:
      - in: body
        name: body
        description: body for User content
        required: true
        schema:
          $ref: '#/definitions/models.User'
      responses:
        "201":
          description: '{int} models.User'
        "403":
          description: body is empty
  /User/{id}:
    get:
      tags:
      - User
      description: get User by id
      operationId: UserController.Get One
      parameters:
      - in: path
        name: id
        description: The key for staticblock
        required: true
        type: string
      responses:
        "200":
          schema:
            $ref: '#/definitions/models.User'
        "403":
          description: :id is empty
    put:
      tags:
      - User
      description: update the User
      operationId: UserController.Put
      parameters:
      - in: path
        name: id
        description: The id you want to update
        required: true
        type: string
      - in: body
        name: body
        description: body for User content
        required: true
        schema:
          $ref: '#/definitions/models.User'
      responses:
        "200":
          schema:
            $ref: '#/definitions/models.User'
        "403":
          description: :id is not int
    delete:
      tags:
      - User
      description: delete the User
      operationId: UserController.Delete
      parameters:
      - in: path
        name: id
        description: The id you want to delete
        required: true
        type: string
      responses:
        "200":
          description: '{string} delete success!'
        "403":
          description: id is empty
definitions:
  dtos.FriendsInput:
    title: FriendsInput
    type: object
    properties:
      Friends: {}
  models.Friend:
    title: Friend
    type: object
    properties:
      Id:
        type: integer
        format: int64
      Requestor:
        $ref: '#/definitions/models.User'
      Target:
        $ref: '#/definitions/models.User'
  models.Subscription:
    title: Subscription
    type: object
    properties:
      Id:
        type: integer
        format: int64
      IsBlock:
        type: boolean
      Requestor:
        $ref: '#/definitions/models.User'
      Target:
        $ref: '#/definitions/models.User'
  models.User:
    title: User
    type: object
    properties:
      EmailAddress:
        type: string
      Id:
        type: integer
        format: int64
tags:
- name: Subscription
  description: |
    SubscriptionController operations for Subscription
- name: Friend
  description: |
    FriendController operations for Friend
- name: User
  description: |
    UserController operations for User
